{"ast":null,"code":"import { repeat } from '../utils';\n/**\r\n * TODO: dedup with intl-pluralrules and support BigInt\r\n * https://tc39.es/ecma402/#sec-torawfixed\r\n * @param x a finite non-negative Number or BigInt\r\n * @param minFraction and integer between 0 and 20\r\n * @param maxFraction and integer between 0 and 20\r\n */\n\nexport function ToRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n\n  var m;\n\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n\n    var _a = m.split('e'),\n        mantissa = _a[0],\n        exponent = _a[1];\n\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n\n  var int;\n\n  if (f !== 0) {\n    var k = m.length;\n\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = a + \".\" + b;\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n\n  var cut = maxFraction - minFraction;\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n}","map":{"version":3,"names":["repeat","ToRawFixed","x","minFraction","maxFraction","f","n","Math","round","pow","xFinal","m","toString","_a","split","mantissa","exponent","replace","max","length","int","k","z","a","slice","b","cut","formattedString","roundedNumber","integerDigitsCount"],"sources":["C:/suresh/project-two/metiegrow-ui-app/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawFixed.js"],"sourcesContent":["import { repeat } from '../utils';\r\n/**\r\n * TODO: dedup with intl-pluralrules and support BigInt\r\n * https://tc39.es/ecma402/#sec-torawfixed\r\n * @param x a finite non-negative Number or BigInt\r\n * @param minFraction and integer between 0 and 20\r\n * @param maxFraction and integer between 0 and 20\r\n */\r\nexport function ToRawFixed(x, minFraction, maxFraction) {\r\n    var f = maxFraction;\r\n    var n = Math.round(x * Math.pow(10, f));\r\n    var xFinal = n / Math.pow(10, f);\r\n    // n is a positive integer, but it is possible to be greater than 1e21.\r\n    // In such case we will go the slow path.\r\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\r\n    var m;\r\n    if (n < 1e21) {\r\n        m = n.toString();\r\n    }\r\n    else {\r\n        m = n.toString();\r\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\r\n        m = mantissa.replace('.', '');\r\n        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\r\n    }\r\n    var int;\r\n    if (f !== 0) {\r\n        var k = m.length;\r\n        if (k <= f) {\r\n            var z = repeat('0', f + 1 - k);\r\n            m = z + m;\r\n            k = f + 1;\r\n        }\r\n        var a = m.slice(0, k - f);\r\n        var b = m.slice(k - f);\r\n        m = a + \".\" + b;\r\n        int = a.length;\r\n    }\r\n    else {\r\n        int = m.length;\r\n    }\r\n    var cut = maxFraction - minFraction;\r\n    while (cut > 0 && m[m.length - 1] === '0') {\r\n        m = m.slice(0, -1);\r\n        cut--;\r\n    }\r\n    if (m[m.length - 1] === '.') {\r\n        m = m.slice(0, -1);\r\n    }\r\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiD;EACpD,IAAIC,CAAC,GAAGD,WAAR;EACA,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAGK,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAf,CAAR;EACA,IAAIK,MAAM,GAAGJ,CAAC,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAjB,CAHoD,CAIpD;EACA;EACA;;EACA,IAAIM,CAAJ;;EACA,IAAIL,CAAC,GAAG,IAAR,EAAc;IACVK,CAAC,GAAGL,CAAC,CAACM,QAAF,EAAJ;EACH,CAFD,MAGK;IACDD,CAAC,GAAGL,CAAC,CAACM,QAAF,EAAJ;;IACA,IAAIC,EAAE,GAAGF,CAAC,CAACG,KAAF,CAAQ,GAAR,CAAT;IAAA,IAAuBC,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAApC;IAAA,IAAyCG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAAtD;;IACAF,CAAC,GAAGI,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAJ;IACAN,CAAC,GAAGA,CAAC,GAAGX,MAAM,CAAC,GAAD,EAAMO,IAAI,CAACW,GAAL,CAAS,CAACF,QAAD,GAAYL,CAAC,CAACQ,MAAd,GAAuB,CAAhC,EAAmC,CAAnC,CAAN,CAAd;EACH;;EACD,IAAIC,GAAJ;;EACA,IAAIf,CAAC,KAAK,CAAV,EAAa;IACT,IAAIgB,CAAC,GAAGV,CAAC,CAACQ,MAAV;;IACA,IAAIE,CAAC,IAAIhB,CAAT,EAAY;MACR,IAAIiB,CAAC,GAAGtB,MAAM,CAAC,GAAD,EAAMK,CAAC,GAAG,CAAJ,GAAQgB,CAAd,CAAd;MACAV,CAAC,GAAGW,CAAC,GAAGX,CAAR;MACAU,CAAC,GAAGhB,CAAC,GAAG,CAAR;IACH;;IACD,IAAIkB,CAAC,GAAGZ,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAWH,CAAC,GAAGhB,CAAf,CAAR;IACA,IAAIoB,CAAC,GAAGd,CAAC,CAACa,KAAF,CAAQH,CAAC,GAAGhB,CAAZ,CAAR;IACAM,CAAC,GAAGY,CAAC,GAAG,GAAJ,GAAUE,CAAd;IACAL,GAAG,GAAGG,CAAC,CAACJ,MAAR;EACH,CAXD,MAYK;IACDC,GAAG,GAAGT,CAAC,CAACQ,MAAR;EACH;;EACD,IAAIO,GAAG,GAAGtB,WAAW,GAAGD,WAAxB;;EACA,OAAOuB,GAAG,GAAG,CAAN,IAAWf,CAAC,CAACA,CAAC,CAACQ,MAAF,GAAW,CAAZ,CAAD,KAAoB,GAAtC,EAA2C;IACvCR,CAAC,GAAGA,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAJ;IACAE,GAAG;EACN;;EACD,IAAIf,CAAC,CAACA,CAAC,CAACQ,MAAF,GAAW,CAAZ,CAAD,KAAoB,GAAxB,EAA6B;IACzBR,CAAC,GAAGA,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAJ;EACH;;EACD,OAAO;IAAEG,eAAe,EAAEhB,CAAnB;IAAsBiB,aAAa,EAAElB,MAArC;IAA6CmB,kBAAkB,EAAET;EAAjE,CAAP;AACH"},"metadata":{},"sourceType":"module"}