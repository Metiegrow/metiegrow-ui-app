{"ast":null,"code":"import { invariant } from './utils';\n/**\r\n * https://tc39.es/ecma402/#sec-partitionpattern\r\n * @param pattern\r\n */\n\nexport function PartitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}","map":{"version":3,"names":["invariant","PartitionPattern","pattern","result","beginIndex","indexOf","endIndex","nextIndex","length","push","type","value","substring","undefined"],"sources":["C:/suresh/project-two/metiegrow-ui-app/node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js"],"sourcesContent":["import { invariant } from './utils';\r\n/**\r\n * https://tc39.es/ecma402/#sec-partitionpattern\r\n * @param pattern\r\n */\r\nexport function PartitionPattern(pattern) {\r\n    var result = [];\r\n    var beginIndex = pattern.indexOf('{');\r\n    var endIndex = 0;\r\n    var nextIndex = 0;\r\n    var length = pattern.length;\r\n    while (beginIndex < pattern.length && beginIndex > -1) {\r\n        endIndex = pattern.indexOf('}', beginIndex);\r\n        invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\r\n        if (beginIndex > nextIndex) {\r\n            result.push({\r\n                type: 'literal',\r\n                value: pattern.substring(nextIndex, beginIndex),\r\n            });\r\n        }\r\n        result.push({\r\n            type: pattern.substring(beginIndex + 1, endIndex),\r\n            value: undefined,\r\n        });\r\n        nextIndex = endIndex + 1;\r\n        beginIndex = pattern.indexOf('{', nextIndex);\r\n    }\r\n    if (nextIndex < length) {\r\n        result.push({\r\n            type: 'literal',\r\n            value: pattern.substring(nextIndex, length),\r\n        });\r\n    }\r\n    return result;\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,SAA1B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EACtC,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,CAAjB;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,MAAM,GAAGN,OAAO,CAACM,MAArB;;EACA,OAAOJ,UAAU,GAAGF,OAAO,CAACM,MAArB,IAA+BJ,UAAU,GAAG,CAAC,CAApD,EAAuD;IACnDE,QAAQ,GAAGJ,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBD,UAArB,CAAX;IACAJ,SAAS,CAACM,QAAQ,GAAGF,UAAZ,EAAwB,qBAAqBF,OAA7C,CAAT;;IACA,IAAIE,UAAU,GAAGG,SAAjB,EAA4B;MACxBJ,MAAM,CAACM,IAAP,CAAY;QACRC,IAAI,EAAE,SADE;QAERC,KAAK,EAAET,OAAO,CAACU,SAAR,CAAkBL,SAAlB,EAA6BH,UAA7B;MAFC,CAAZ;IAIH;;IACDD,MAAM,CAACM,IAAP,CAAY;MACRC,IAAI,EAAER,OAAO,CAACU,SAAR,CAAkBR,UAAU,GAAG,CAA/B,EAAkCE,QAAlC,CADE;MAERK,KAAK,EAAEE;IAFC,CAAZ;IAIAN,SAAS,GAAGD,QAAQ,GAAG,CAAvB;IACAF,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBE,SAArB,CAAb;EACH;;EACD,IAAIA,SAAS,GAAGC,MAAhB,EAAwB;IACpBL,MAAM,CAACM,IAAP,CAAY;MACRC,IAAI,EAAE,SADE;MAERC,KAAK,EAAET,OAAO,CAACU,SAAR,CAAkBL,SAAlB,EAA6BC,MAA7B;IAFC,CAAZ;EAIH;;EACD,OAAOL,MAAP;AACH"},"metadata":{},"sourceType":"module"}